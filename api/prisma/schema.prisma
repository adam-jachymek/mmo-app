// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemType {
  HEAD
  CHEST
  WEAPON
  OFFHAND
  LEGS
  POTION
  BAG
  COMMON
}

enum ItemQuality {
  RANDOM
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum GuildRole {
  PENDING
  MEMBER
  MOD
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  username String? @unique

  hp Int? @default(100)
  maxHp Int? @default(100)
  level Int? @default(1)
  exp Int? @default(0)
  maxExp Int? @default(100)
  points Int? @default(5)
  gold Int? @default(0)
  avatar String?

  stamina Int? @default(10)
  strength Int? @default(10)
  defence Int? @default(10)
  dexterity Int? @default(10)
  intelligence Int? @default(10)

  eqStamina Int? @default(0)
  eqDefence Int? @default(0)

  mapId Int? @default(1)
  x Int?
  y Int?

  items Item[]
  inBattle UsersInBattle[]
  activeInBattle Battle[]

  guild Guild? @relation(fields: [guildId], references: [id])
  guildId Int?
  guildRole GuildRole?

  @@map("users")
}

model ItemPrototype {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  sprite  String?
  description String?
  type ItemType?
  quality ItemQuality?
  minStat Int?
  maxStat Int?
  isEquipment Boolean?
  actionAmount Int?
  actionName String?

  items Item[]

  @@map("itemPrototypes")
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?
  sprite String?
  type ItemType?
  quality ItemQuality?
  isEquipment Boolean?
  stamina Int?
  defence Int?
  level Int?
  score Int?
  minAttack Int?
  maxAttack Int?
  actionAmount Int?
  actionName String?
  amount Int?
  equip Boolean? @default(false)

  user User @relation(fields: [userId], references: [id])
  userId Int

  item ItemPrototype @relation(fields: [itemPrototypeId], references: [id])
  itemPrototypeId Int

  @@map("items")
}

model Mob {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  minLevel Int?
  maxLevel Int?
  sprite String?
  hp Int?
  attack Int?
  defence Int?
  giveExp Int?

  map Map? @relation(fields: [mapId], references: [id])
  mapId Int

  mobSpawn MobSpawn[]

  @@map("mobs")
}

model MobSpawn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?
  level Int?
  hp Int?
  maxHp Int?
  attack Int?
  defence Int?
  giveExp Int?
  sprite String?

  mob Mob @relation(fields: [mobId], references: [id])
  mobId Int

  inBattle MobsInBattle[]
  activeInBattle Battle[]

  @@map("mobSpawn")
}

model Map {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  minLevel Int?
  maxLevel Int?
  sprite String?
  numberOfTiles Int?

  tiles MapTiles[]
  mobs Mob[]

  @@map("maps")
}

model MapTiles {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sprite String?
  text String? @default("")
  blocked Boolean? @default(false)
  x Int
  y Int

  map Map? @relation(fields: [mapId], references: [id])
  mapId Int

  @@map("mapTiles")
}

model Battle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usersInBattle UsersInBattle[]
  mobsInBattle MobsInBattle[]
  activeUser   User? @relation(fields: [activeUserId], references: [id])
  activeUserId Int?
  activeMob    MobSpawn? @relation(fields: [activeMobId], references: [id])
  activeMobId  Int?
  userTurn     Boolean?
  battleEnded  Boolean?
  youWin       Boolean?
  youLost      Boolean?

  @@map("battle")
}

model UsersInBattle {
  battle       Battle     @relation(fields: [battleId], references: [id])
  battleId     Int
  user         User @relation(fields: [userId], references: [id])
  userId       Int
  assignedAt   DateTime @default(now())
  turn         Boolean?

  @@id([battleId, userId])
}

model MobsInBattle {
  battle       Battle     @relation(fields: [battleId], references: [id])
  battleId     Int
  mob          MobSpawn @relation(fields: [mobId], references: [id])
  mobId        Int
  assignedAt   DateTime @default(now())
  turn         Boolean?

  @@id([battleId, mobId])
}

model Explore {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  msg String?
  isItem Boolean
  minLevel Int?
  maxLevel Int?
  sprite String?

  @@map("explore")
}

model Guild {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String?

  users User[]

  @@map("guild")
}
