//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// config.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// battle.prisma
//

model Battle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usersInBattle UsersInBattle[]
  mobsInBattle  MobsInBattle[]
  activeUser    User?           @relation(fields: [activeUserId], references: [id])
  activeUserId  Int?
  activeMob     MobSpawn?       @relation(fields: [activeMobId], references: [id])
  activeMobId   Int?
  userTurn      Boolean?
  battleEnded   Boolean?
  youWin        Boolean?
  itemDropIds   Int[]
  youLost       Boolean?

  @@map("battle")
}

model UsersInBattle {
  battle     Battle   @relation(fields: [battleId], references: [id], onDelete: Cascade)
  battleId   Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime @default(now())
  turn       Boolean?

  @@id([battleId, userId])
}

model MobsInBattle {
  battle     Battle   @relation(fields: [battleId], references: [id], onDelete: Cascade)
  battleId   Int
  mob        MobSpawn @relation(fields: [mobId], references: [id], onDelete: Cascade)
  mobId      Int
  assignedAt DateTime @default(now())
  turn       Boolean?

  @@id([battleId, mobId])
}

//
// explore.prisma
//

model Explore {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  msg      String?
  isItem   Boolean
  minLevel Int?
  maxLevel Int?
  sprite   String?

  @@map("explore")
}

//
// guild.prisma
//

model Guild {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  users User[]

  @@map("guild")
}

//
// items.prisma
//

enum MainType {
  WEAPON
  ARMOR
  ITEM
}

enum WeaponType {
  MELEE
  MAGIC
  RANGE
}

enum ArmorType {
  HEAD
  CHEST
  OFFHAND
  LEGS
}

enum ItemType {
  GOLD
  POTION
  BAG
  MATERIAL
  FOOD
  QUEST
  OTHER
}

enum ItemQuality {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model ItemPrototype {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String?
  sprite       String?
  description  String?
  mainType     MainType?
  weaponType   WeaponType?
  armorType    ArmorType?
  itemType     ItemType?
  quality      ItemQuality?
  minAttack    Int?
  maxAttack    Int?
  stamina      Int?
  defence      Int?
  strenght     Int?
  dexterity    Int?
  intelligence Int?
  actionAmount Int?

  items          Item[]
  actionItemDrop ActionItemDrop[]

  @@map("itemPrototypes")
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String?
  sprite       String?
  description  String?
  mainType     MainType?
  weaponType   WeaponType?
  armorType    ArmorType?
  itemType     ItemType?
  quality      ItemQuality?
  minAttack    Int?
  maxAttack    Int?
  stamina      Int?
  defence      Int?
  strenght     Int?
  dexterity    Int?
  intelligence Int?
  actionAmount Int?
  level        Int?
  equip        Boolean?     @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  item            ItemPrototype @relation(fields: [itemPrototypeId], references: [id])
  itemPrototypeId Int

  @@map("items")
}

model ActionItemDrop {
  id               Int             @id @default(autoincrement())
  actionMobSpawn   ActionMobSpawn? @relation(fields: [actionMobSpawnId], references: [id])
  actionMobSpawnId Int?
  mapTile          MapTiles?       @relation(fields: [mapTileId], references: [id])
  mapTileId        Int?
  item             ItemPrototype   @relation(fields: [itemId], references: [id])
  itemId           Int
  dropRate         Int
  quantityMin      Int
  quantityMax      Int
}

//
// map.prisma
//

model Map {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  minLevel      Int?
  maxLevel      Int?
  sprite        String?
  numberOfTiles Int?

  tiles MapTiles[]

  @@map("maps")
}

model MapTiles {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sprite      String?
  object      String?
  text        String?  @default("")
  blocked     Boolean? @default(false)
  x           Int
  y           Int
  action_name String?
  action      Json?

  teleportFrom ActionTeleport? @relation(name: "teleportFrom")
  teleportTo   ActionTeleport? @relation(name: "teleportTo")

  actionItemDrop  ActionItemDrop[]
  actionMobSpawns ActionMobSpawnsOnTiles[]

  npc   Npc? @relation(fields: [npcId], references: [id])
  npcId Int?

  map   Map? @relation(fields: [mapId], references: [id])
  mapId Int

  @@map("mapTiles")
}

model MapSprites {
  id       Int    @id @default(autoincrement())
  name     String
  category String
  sprite   String
}

model ActionTeleport {
  tile     MapTiles? @relation(name: "teleportFrom", fields: [tileId], references: [id])
  tileId   Int       @id
  toTile   MapTiles? @relation(name: "teleportTo", fields: [toTileId], references: [id])
  toTileId Int       @unique

  @@map("actionTeleport")
}

//
// mobs.prisma
//

model Mob {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  sprite  String?
  hp      Int?
  attack  Int?
  defence Int?
  giveExp Int?

  mobSpawn  MobSpawn[]
  actionMob ActionMobSpawn[]

  @@map("mobs")
}

model MobSpawn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String?
  level             Int?
  hp                Int?
  maxHp             Int?
  attack            Int?
  defence           Int?
  giveExp           Int?
  sprite            String?
  actionItemDropIds Int[]

  mob   Mob @relation(fields: [mobId], references: [id])
  mobId Int

  inBattle       MobsInBattle[]
  activeInBattle Battle[]

  @@map("mobSpawn")
}

model ActionMobSpawn {
  id        Int                      @id @default(autoincrement())
  mob       Mob                      @relation(fields: [mobId], references: [id])
  mobId     Int
  minLevel  Int
  maxLevel  Int
  spawnRate Int
  drop      ActionItemDrop[]
  mapTiles  ActionMobSpawnsOnTiles[]
}

model ActionMobSpawnsOnTiles {
  actionMobSpawn   ActionMobSpawn @relation(fields: [actionMobSpawnId], references: [id], onDelete: Cascade)
  actionMobSpawnId Int
  mapTile          MapTiles       @relation(fields: [mapTileId], references: [id])
  mapTileId        Int

  @@id([actionMobSpawnId, mapTileId])
}

//
// npc.prisma
//

model Npc {
  id      Int        @id @default(autoincrement())
  name    String
  avatar  String
  dialog  Dialog[]
  mapTile MapTiles[]
}

model Dialog {
  id      Int            @id @default(autoincrement())
  name    String?
  text    String?
  isStart Boolean?
  isEnd   Boolean?
  npc     Npc?           @relation(fields: [npcId], references: [id])
  npcId   Int?
  options DialogOption[]
}

model DialogOption {
  id       Int     @id @default(autoincrement())
  text     String
  dialog   Dialog? @relation(fields: [dialogId], references: [id])
  dialogId Int?
}

//
// user.prisma
//

enum GuildRole {
  PENDING
  MEMBER
  MOD
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  username String? @unique

  hp     Int?    @default(100)
  maxHp  Int?    @default(100)
  level  Int?    @default(1)
  exp    Int?    @default(0)
  maxExp Int?    @default(100)
  points Int?    @default(5)
  gold   Int?    @default(0)
  avatar String?

  stamina      Int? @default(10)
  strength     Int? @default(10)
  defence      Int? @default(10)
  dexterity    Int? @default(10)
  intelligence Int? @default(10)

  totalStamina  Int? @default(0)
  totalDefence  Int? @default(0)
  totalStrength Int? @default(0)

  minAttack Int? @default(0)
  maxAttack Int? @default(0)

  mapId Int? @default(1)
  x     Int? @default(2)
  y     Int? @default(2)

  battleId Int?

  items          Item[]
  inBattle       UsersInBattle[]
  activeInBattle Battle[]

  guild     Guild?     @relation(fields: [guildId], references: [id])
  guildId   Int?
  guildRole GuildRole?

  @@map("users")
}
